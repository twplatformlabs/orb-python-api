---
version: 2.1

orbs:
  python-api: twdps/python-api@dev:<<pipeline.git.revision>>
  op: twdps/onepassword@3.0.0

globals:
  - &context orb-publishing
  - &image orb-python-api
  - &registry ghcr.io/twplatformlabs

commands:

  set-environment:
    steps:
      - op/env
      - run:
          name: set version var
          command: |
            echo "export API_VERSION=dev.${CIRCLE_SHA1:0:7}" >> $BASH_ENV
            source $BASH_ENV
      - op/write-to-file:
          op-value: platform/svc-cosign-private-key/notesPlain
          out-file: cosign.key
      - op/write-to-file:
          op-value: platform/svc-cosign-public-key/notesPlain
          out-file: cosign.pub

jobs:

  test static analysis commands:
    docker:
      - image: twdps/circleci-python-builder:stable
    steps:
      - checkout
      - setup_remote_docker
      - python-api/packages:
          package-manager: pip
          install-dev: true
          pip-requirements-filename: test/custom_requirements_filename.txt
          pip-requirements-filename-dev: test/custom_dev_requirements_filename.txt
      - run:
          name: confirm installed packages from custom requirements and dev requirements files
          command: |
            set -exo pipefail
            pip list | grep "fastapi"
            pip list | grep "uvicorn"
      - python-api/lint:
          lint-path: ""
          pylint-options: "--version > pylint-outfile"
      - run:
          name: confirm pylint installation and parameters
          command: |
            set -exo pipefail
            cat pylint-outfile | grep "pylint"
      - python-api/hadolint:
          dockerfile: ""
          hadolint-additional-args: "--version > hadolint-outfile"
      - run:
          name: confirm hadolint installation and parameters
          command: |
            set -exo pipefail
            cat hadolint-outfile | grep "Haskell"

workflows:

  integration tests:
    jobs:
      - test static analysis commands

      - python-api/static-analysis:
          name: test static-analysis job
          shell: /bin/bash -eo pipefail
          executor-image: twdps/circleci-python-builder:stable
          executor-resource-class: large
          package-manager: pip
          install-dev: true
          pip-requirements-filename: test/requirements.txt
          pip-requirements-filename-dev: test/requirements-dev.txt
          lint-path: api
          hadolint: false
          coverage: true
          after-checkout:
            - run:
                name: after-checkout message
                command: echo "after-checkout"
          after-analysis:
            - run:
                name: after-analysis message
                command: echo "after-analysis"

      - python-api/oci-image-build:
          name: test oci-image-build job
          context: *context
          registry: *registry
          image: *image
          shell: /bin/bash -eo pipefail
          executor-machine: ubuntu-2204:current
          executor-resource-class: medium
          dockerfile: test/Dockerfile
          cve-scan: true
          snyk-severity-threshold: "low"
          snyk-organization: twplatformlabs
          snyk-skip-base-image: true
          health-url: "http://0.0.0.0:8000/v1/test/healthz"
          port-definition: "8000:8000"
          docker-run-arguments: "-e API_VERSION=dev.${CIRCLE_SHA1:0:7}"
          startup-delay: 5
          before-build:
            - set-environment
            - run:
                name: before-build message
                command: echo "before-build"
          after-build:
            - run:
                name: after-build message
                command: echo "after-build"
          after-push:
            - run:
                name: after-push message
                command: echo "after-push"
          requires:
            - test static-analysis job

      - python-api/publish-image:
          name: test publish job
          context: *context
          image: *image
          registry: *registry
          publish-tag: $CIRCLE_BUILD_NUM
          before-push:
            - set-environment
            - run:
                name: before-push message
                command: echo "before-push"
          after-push:
            - run:
                name: after-push message
                command: echo "after-push"
          requires:
            - test oci-image-build job
